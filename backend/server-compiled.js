(()=>{var e={860:e=>{"use strict";e.exports=require("express")},13:e=>{"use strict";e.exports=require("mongodb")},109:e=>{"use strict";e.exports=require("sanitize-html")}},t={};function s(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,s),a.exports}(()=>{const{MongoClient:e,ObjectId:t}=s(13),n=s(860),o=s(109);let a;const i=n();i.set("view engine","ejs"),i.set("views","./views"),i.use(n.static("../public")),i.use(n.json()),i.use(n.urlencoded({extended:!1})),i.get("/",(async(e,t)=>{const s=await a.collection("Tasks").find().toArray();console.log(s),t.render("home",{allTasks:s})})),i.get("/admin",((e,t)=>{t.render("admin")})),i.get("/api/tasks",(async(e,t)=>{const s=await a.collection("Tasks").find().toArray();t.json(s)})),i.post("/create-task",((e,t,s)=>{"string"!=typeof e.body.name&&(e.body.name="sanitized"),"string"!=typeof e.body.decription&&(e.body.name=""),e.cleanData={name:o(e.body.name.trim(),{allowedTags:[],allowedAttributes:{}}),description:o(e.body.description.trim(),{allowedTags:[],allowedAttributes:{}})},s()}),(async(e,s)=>{console.log(e);const n=await a.collection("Tasks").insertOne(e.cleanData),o=await a.collection("Tasks").findOne({_id:new t(n.insertId)});s.send(o)})),async function(){const t=new e("mongodb://root:root@localhost:27017/Kanban-App?&authSource=admin");await t.connect(),a=t.db(),i.listen(3e3)}()})()})();